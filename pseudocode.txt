--- PSEUDOCODE ASSIGNMENT ---
Define the problem:
During library prep for Illumina sequencing, the library must be PCR amplified.
Because PCR does not amplify all sequences uniformly, PCR duplicates in the 
sequencing results should be taken out to prevent downstream errors in genome assembly,
haplotype identification, gene expression, etc.


before running the Deduper script run samtools sort first on the command line
    - sorts by refname/chromosome then by alignment postion
    - probably will want to use -o to output sorted file to new file


Deduper pseudocode:
shebang to specify python to run this script

modules to import:
    argparse
    re

def get_args():
    ''' obtain input names/paths of input files from the command line '''
    • add argument specifications for the input items
    return the function

•input from command line: names of files
•expected: able to store and use the file names

use argparse to store
    path/name of file with UMI info
    path/name of SAM file

def get_strandedness(bitwise_flag):
    '''takes the bitwise flag and returns a boolean for whether 
    the read is aligned on the forward strand'''

    if reverse compliment bit not set:
        return True
    else:
        return False
• input: 0
• output: True
• input: 16
• output: False

def adjust_pos(position, forward, cigar_string):
    '''Considers strandedness and returns an adjusted position if there
    is soft-clipping, insertions, deletions etc. denoted in the CIGAR string.
    Returns the original position if adjustment not necessary.'''

    if foward strand:
        if soft-clipping at the beginning of the CIGAR string:
            subtract softclipping from the position
    else:
        if insertions, deletions, skips or soft-clipping at the end of the CIGAR string present:
            adjust position accordingly
    return position
• input: 100, True, 3S100M
• output: 97
• input: 100, False, 3S5D100M2S
• output: 107


read in the 96 UMI sequences from STL96.txt
    store UMIs in a set

initialize variable called current_refname to hold the reference name of the current read

initialize empty dictionary called temp_dict
    • will hold relevant info for non-duplicates for each chromosome
    • will be cleared for each new chromosome/scaffold/group etc.

initialize general counter for number of reads
initialize unknown_UMIs counter
initialize not_duplicate counter
initialize presumed_dupl counter

open files to write to:
    output SAM file
    unknown UMIs file

open input SAM file

Read input SAM file one line at a time skipping the header lines
    Increment general counter
    Initialize temporary variables for UMI, bitwise flag, strand, refname, position, and CIGAR string
    Extract and store the bitwise flag, reference name (chromosome), alignment position, and CIGAR string using regex
    Check if the refname matches the one stored in current_refname
        different:
            • empty the temp_dict
            • overwrite the global current_refname with the new one
    Chck if the UMI in the set of UMIs?
        False: 
            • write to unknown UMIs file and loop back to the top to read in the next line
            • increment unknown UMI counter
        True:
            Use bitwise flag to check if mapped:
                True:
                    Use get_strandedness function and store whether the read aligned to the fwd or rev strand
                    Use adjust_pos function to adjust position if necessary
                    Check whether the UMI is in the temp_dict:
                        NOT present:
                            • write the read to the output SAM file
                            • add dictionary to the temp_dict where the key is the UMI and the value is a
                              set containing one tuple of position,strandedness
                            • increment not_duplicate counter
                        UMI is present:
                            Use the UMI to look up the associated position,strandedness tuple(s) in the temp_dict
                            and check whether the current position, strandedness combo is present:
                                NOT in the set of tuples:
                                    • write the read to the output SAM file
                                    • add the position,strandedness tuple to the Value for the UMI in the temp_dict
                                    • increment not_duplicate counter
                                YES already in the set of tuples:
                                    • increment presumed_dupl counter
                                    • loop back to top and read in next line

close all files!

print report from counters